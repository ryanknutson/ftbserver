todoList = {
  "while not turtle.forward() do\
    if turtle.getFuelLevel() == 0 then\
      Fuel()\
    elseif dig() == false then\
      turtle.attack()\
    end\
  end",
  "table.insert(variables.cache, variables.direction)",
  "variables.direction = 1",
  "CompareAll(\"CompareBack()\")",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareRight()",
  "CompareUp()",
  "Return()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareLeft()",
  "CompareRight()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareUp()",
  "CompareDown()",
  "Return()",
  "CompareRight()",
  "CompareDown()",
  "Return()",
  "placeFloor()",
  "turtle.select(SlotCalculator(\"T\", \"empty\")[1])",
  "FreewayUp()",
  "CompareAll(\"Compare()\", \"CompareBack()\", \"CompareDown()\")",
  "compStep()",
  "compStep()",
  "compStep()",
  "compStep()",
  "compStep()",
  "Freeway()",
  "youJustGotLittUp(settings.length, stepAside, true)",
  "if variables.level == 1 then\
    insert('CompareAll(\"CompareBack()\", \"CompareDown()\")')\
    insert('FreewayDown()')\
    insert('CompareAll(\"CompareBack()\", \"CompareUp()\")')\
  else\
    insert('CompareAll(\"CompareBack()\", \"CompareUp()\")')\
    insert('FreewayUp()')\
    insert('CompareAll(\"CompareBack()\", \"CompareDown()\")')\
  end",
  "face(3)",
  "old_orientation = {}",
  "for k,v in ipairs(variables.orientation) do\
    old_orientation[k] = v\
  end",
  "variables.orientation[1] = old_orientation[(1+1)%4+1]",
  "variables.orientation[2] = old_orientation[(2+1)%4+1]",
  "variables.orientation[3] = old_orientation[(3+1)%4+1]",
  "variables.orientation[4] = old_orientation[(4+1)%4+1]",
  "variables.direction = 1",
  "youJustGotLittUp(settings.length, compStep, true)",
  "turtle.turnLeft()",
  "old_orientation = {}",
  "for k,v in ipairs(variables.orientation) do\
    old_orientation[k] = v\
  end",
  "variables.orientation[1] = old_orientation[(1)%4+1]",
  "variables.orientation[2] = old_orientation[(2)%4+1]",
  "variables.orientation[3] = old_orientation[(3)%4+1]",
  "variables.orientation[4] = old_orientation[(4)%4+1]",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "tunnel(false)",
  "variables.CrosswayAmount = variables.CrosswayAmount + 1\
    print(lang.status(settings.language, 8, variables.CrosswayAmount, settings.quantity))",
  "print(lang.status(settings.language, 9))",
  "turn()",
  "if variables.level == 1 then\
    FreewayDown()\
  end",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "Freeway()",
  "local endDay = os.day()\
  local endTime = os.time()\
  variables.stats[\"time\"] = (endDay-variables.startDay)*24.000+(endTime-variables.startTime)",
}
